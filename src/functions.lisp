(in-package :dense-numericals.impl)
(5am:in-suite :dense-numericals)

(cffi:load-foreign-library (cl:merge-pathnames #P"../c-src/libdense-numericals.so"
                                               c:*src-dir*))

(define-polymorphic-function dn:sin (x &optional out) :overwrite t)

;; Basic Concept:
;; (c:dn-ssin (array-total-size x) (ptr x) 1 (ptr out) 1)

(defpolymorph dn:sin ((x (array single-float))
                      &optional ((out (array single-float))
                                 (zeros-like x)))
    (array single-float)
  (declare (optimize speed))
  ;; (c:dn-ssin (array-total-size x) (ptr x) 1 (ptr out) 1)
  (ptr-iterate-but-inner n ((ptr-x   init-x   ix   x)
                            (ptr-out init-out iout out))
                         (c:dn-ssin n
                                    ptr-x   init-x   ix
                                    ptr-out init-out iout))
  out)

(defpolymorph dn:sin ((x (array double-float))
                      &optional ((out (array double-float))
                                 (zeros-like x)))
    (array double-float)
  (declare (optimize speed))
  (ptr-iterate-but-inner n ((ptr-x   init-x   ix   x)
                            (ptr-out init-out iout out))
                         (c:dn-dsin n
                                    ptr-x   init-x   ix
                                    ptr-out init-out iout))
  out)

(5am:def-test dn:sin ()
  (macrolet ((verify (type error)
               `(progn
                  (5am:is-true (let ((rand (rand 1000 :type ,type)))
                                 (array= (macro-map-array 'cl:sin rand)
                                         (dn:sin rand)
                                         :test (lambda (x y)
                                                 (< (/ (abs (- x y)) (abs x))
                                                    ,error)))))
                  (5am:is-true (let* ((rand (aref (rand '(100 100) :type ,type)
                                                  '(10 :step 2))))
                                 (array= (macro-map-array 'cl:sin rand)
                                         (dn:sin rand rand)
                                         :test (lambda (x y)
                                                 (if (not (< (/ (abs (- x y)) (abs x))
                                                             ,error))
                                                     (progn (print (list x y)) nil)
                                                     t)))))
                  (5am:is-true (let ((rand (aref (rand '(100 100) :type ,type)
                                                 '(10 :step 2)
                                                 '(10 :step 2))))
                                 (array= (macro-map-array 'cl:sin rand)
                                         (dn:sin rand rand)
                                         :test (lambda (x y)
                                                 (< (/ (abs (- x y)) (abs x))
                                                    ,error)))))
                  (5am:is-true (let ((rand (aref (rand '(100 100) :type ,type)
                                                 nil
                                                 '(10 :step -2))))
                                 (array= (macro-map-array 'cl:sin rand)
                                         (dn:sin rand rand)
                                         :test (lambda (x y)
                                                 (< (/ (abs (- x y)) (abs x))
                                                    ,error)))))
                  (5am:is-true (let* ((array (asarray '((1 2 3) (4 5 6))
                                                      ,type)))
                                 (dn:sin (aref array nil 1)
                                         (aref array nil 1))
                                 (equalp '(1 3 4 6)
                                         (list (aref array 0 0)
                                               (aref array 0 2)
                                               (aref array 1 0)
                                               (aref array 1 2))))))))
    (verify 'single-float 2e-7)
    (verify 'double-float 1d-15)))
